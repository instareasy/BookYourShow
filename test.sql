--INSERT CART(EVENT)

CREATE OR REPLACE PROCEDURE P_INSERT_CART_EVENT(V_USER_ID USER_TABLE.USER_ID%TYPE, V_EVENT_ID EVENTS.EVENT_ID%TYPE, V_QUANTITY CART.QUANTITY%TYPE) IS
    CURSOR C_INSERT_CART IS SELECT * FROM EVENTS WHERE EVENT_ID=V_EVENT_ID;
    CURSOR C_USER_CART IS SELECT * FROM CART WHERE CART.USER_ID = V_USER_ID;
    R_USER_CART C_USER_CART%ROWTYPE;
    R_INSERT_CART C_INSERT_CART%ROWTYPE;
BEGIN
    OPEN C_USER_CART;
    OPEN C_INSERT_CART;
    FETCH C_USER_CART INTO R_USER_CART;
    IF C_USER_CART%FOUND=TRUE THEN
        DBMS_OUTPUT.PUT_LINE('COMPLETE PENDING TRANSACTIONS!!');
    ELSE
        FETCH C_INSERT_CART INTO R_INSERT_CART;
        IF C_INSERT_CART%FOUND=TRUE THEN
            IF V_QUANTITY < R_INSERT_CART.SEAT_AVAILABILITY THEN
                INSERT INTO CART(
                    USER_ID,
                    EVENT_ID,
                    QUANTITY,
                    PRICE
                ) VALUES(
                    V_USER_ID,
                    V_EVENT_ID,
                    V_QUANTITY,
                    V_QUANTITY*R_INSERT_CART.PRICE
                );
                INSERT INTO PRICE_DETAILS(
                    USER_ID,
                    TOTAL_PRICE,
                    TOTAL_TICKET_PRICE,
                    TOTAL_FOOD_PRICE
                ) VALUES(
                    V_USER_ID,
                    V_QUANTITY*R_INSERT_CART.PRICE,
                    V_QUANTITY*R_INSERT_CART.PRICE,
                    0
                );
            ELSE
                DBMS_OUTPUT.PUT_LINE('---------------------------');
                DBMS_OUTPUT.PUT_LINE('LESS OR NO SEAT AVAILABLE!!');
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('----------------------------');
            DBMS_OUTPUT.PUT_LINE('INCORRECT EVENT ID!! ');
        END IF;
    END IF;
    CLOSE C_USER_CART;
    CLOSE C_INSERT_CART;
END;
/
SET SERVEROUTPUT ON

-----------------------------------------------------------------------------------------------------------------------------------------
-- INSERT CART(MOVIE)

CREATE OR REPLACE PROCEDURE P_INSERT_CART_MOVIE(V_USER_ID USER_TABLE.USER_ID%TYPE, V_SELECTION_ID SLOT_SELECTION.SELECTION_ID%TYPE, V_QUANTITY CART.QUANTITY%TYPE) IS
    CURSOR C_INSERT_CART IS SELECT * FROM SLOT_SELECTION WHERE SELECTION_ID=V_SELECTION_ID;
    CURSOR C_USER_CART IS SELECT * FROM CART WHERE CART.USER_ID = V_USER_ID;
    R_USER_CART C_USER_CART%ROWTYPE;
    R_INSERT_CART C_INSERT_CART%ROWTYPE;
BEGIN
    OPEN C_USER_CART;
    OPEN C_INSERT_CART;
    FETCH C_USER_CART INTO R_USER_CART;
    IF C_USER_CART%FOUND=TRUE THEN
        DBMS_OUTPUT.PUT_LINE('COMPLETE PENDING TRANSACTIONS!!');
    ELSE
        FETCH C_INSERT_CART INTO R_INSERT_CART;
        IF C_INSERT_CART%FOUND=TRUE THEN
            IF V_QUANTITY < R_INSERT_CART.SEAT_AVAILABILITY THEN
                INSERT INTO CART(
                    USER_ID,
                    SELECTION_ID,
                    QUANTITY,
                    PRICE
                ) VALUES(
                    V_USER_ID,
                    V_SELECTION_ID,
                    V_QUANTITY,
                    V_QUANTITY*R_INSERT_CART.PRICE
                );
                INSERT INTO PRICE_DETAILS(
                    USER_ID,
                    TOTAL_PRICE,
                    TOTAL_TICKET_PRICE,
                    TOTAL_FOOD_PRICE
                ) VALUES(
                    V_USER_ID,
                    V_QUANTITY*R_INSERT_CART.PRICE,
                    V_QUANTITY*R_INSERT_CART.PRICE,
                    0
                );
            ELSE
                DBMS_OUTPUT.PUT_LINE('---------------------------');
                DBMS_OUTPUT.PUT_LINE('LESS OR NO SEAT AVAILABLE!!');
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('----------------------------');
            DBMS_OUTPUT.PUT_LINE('INCORRECT EVENT ID!! ');
        END IF;
    END IF;
    CLOSE C_USER_CART;
    CLOSE C_INSERT_CART;
END;
/

-------------------------------------------------------------------------------------------------------------------
-- INSERT IN FOOD CART

CREATE OR REPLACE PROCEDURE P_INSERT_FOOD_CART(V_FOOD_ID FOOD.FOOD_ID%TYPE, V_CART_ID CART.CART_ID%TYPE, V_QUANTITY FOOD_CART.QUANTITY%TYPE) IS
    CURSOR C_INSERT_CART IS SELECT * FROM FOOD WHERE FOOD_ID=V_FOOD_ID;
    R_INSERT_CART C_INSERT_CART%ROWTYPE;
    CURSOR C_USER_CART IS SELECT * FROM CART WHERE CART_ID=V_CART_ID;
    R_USER_CART C_USER_CART%ROWTYPE;
    V_TEMP CART.USER_ID%TYPE;

BEGIN
    OPEN C_USER_CART;
    OPEN C_INSERT_CART;
    FETCH C_USER_CART INTO R_USER_CART;

    IF C_USER_CART%FOUND=TRUE THEN
        FETCH C_INSERT_CART INTO R_INSERT_CART;

        IF C_INSERT_CART%FOUND=TRUE THEN
            INSERT INTO FOOD_CART(
                FOOD_ID,
                CART_ID,
                QUANTITY,
                PRICE
            ) VALUES(
                V_FOOD_ID,
                V_CART_ID,
                V_QUANTITY,
                R_INSERT_CART.PRICE*V_QUANTITY
            );
            SELECT USER_ID INTO V_TEMP FROM CART WHERE CART_ID = V_CART_ID;
            UPDATE PRICE_DETAILS SET
                TOTAL_PRICE = TOTAL_PRICE+R_INSERT_CART.PRICE*V_QUANTITY,
                TOTAL_FOOD_PRICE = TOTAL_FOOD_PRICE+R_INSERT_CART.PRICE*V_QUANTITY
            WHERE USER_ID=V_TEMP;

        ELSE
            DBMS_OUTPUT.PUT_LINE('INCORRECT FOOD ID!!');

        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('CART ID NOT FOUND!!');

    END IF;
END;
/

BEGIN
    P_INSERT_CART_EVENT('U103','E0075',3);
END;
/

BEGIN
    P_INSERT_FOOD_CART('F0001','C0064',4);
END;
/

----------------------------------------------------------------------------------------------------------
-- SHOW CART TOTAL

CREATE OR REPLACE PROCEDURE P_SHOW_TOTAL(V_USER_ID USER_TABLE.USER_ID%TYPE) IS
    CURSOR C_CART_DETAIL IS SELECT * FROM CART WHERE CART.USER_ID=V_USER_ID;
    R_CART_DETAIL C_CART_DETAIL%ROWTYPE;
    V_CART_ID CART.CART_ID%TYPE;
    V_PRICE NUMBER;

BEGIN
    OPEN C_CART_DETAIL;
    FETCH C_CART_DETAIL INTO R_CART_DETAIL;

    IF C_CART_DETAIL%FOUND=TRUE THEN
        V_CART_ID := R_CART_DETAIL.CART_ID;
        V_PRICE := R_CART_DETAIL.PRICE;
        DBMS_OUTPUT.PUT_LINE('------------------CART DETAILS------------------'||chr(13)||chr(10));
        DBMS_OUTPUT.PUT_LINE('CART ID: '||R_CART_DETAIL.CART_ID);
        DBMS_OUTPUT.PUT_LINE('USER ID: '||R_CART_DETAIL.USER_ID);

        IF R_CART_DETAIL.EVENT_ID='' THEN
            DBMS_OUTPUT.PUT_LINE('SELECTION ID: '||R_CART_DETAIL.SELECTION_ID);

        ELSE
            DBMS_OUTPUT.PUT_LINE('EVENT ID: '||R_CART_DETAIL.EVENT_ID);

        END IF;
        DBMS_OUTPUT.PUT_LINE('QUANTITY: '||R_CART_DETAIL.QUANTITY);
        DBMS_OUTPUT.PUT_LINE('PRICE: '||R_CART_DETAIL.PRICE);
        DBMS_OUTPUT.PUT_LINE('-----------------------------------');
        P_SHOW_CART_TOTAL(V_CART_ID, V_PRICE);

    END IF;
    CLOSE C_CART_DETAIL;

END;
/

BEGIN
    P_SHOW_TOTAL('U102');
END;
/

----------------------------------------------------------------------------------------------------------
--SHOW CART TOTAL (FOOD)

CREATE OR REPLACE PROCEDURE P_SHOW_CART_TOTAL(V_CART_ID FOOD_CART.CART_ID%TYPE, V_PRICE NUMBER) IS
    CURSOR C_CART_DETAIL IS SELECT * FROM FOOD_CART WHERE FOOD_CART.CART_ID=V_CART_ID;
    TEMP NUMBER;
    TEMP2 NUMBER;
    V_TOTAL_PRICE NUMBER;

BEGIN
    TEMP := 0;
    SELECT SUM(PRICE) INTO TEMP2 FROM FOOD_CART WHERE CART_ID=V_CART_ID;
    FOR FOOD IN C_CART_DETAIL LOOP
        DBMS_OUTPUT.PUT_LINE('FOOD_CART_ID: '||FOOD.FOOD_CART_ID);
        DBMS_OUTPUT.PUT_LINE('FOOD_ID: '||FOOD.FOOD_ID);
        DBMS_OUTPUT.PUT_LINE('QUANTITY: '||FOOD.QUANTITY);
        DBMS_OUTPUT.PUT_LINE('PRICE: '||FOOD.PRICE);
        DBMS_OUTPUT.PUT_LINE('----------------------------------'||chr(10)||chr(13));
        TEMP := 1;

    END LOOP;
    V_TOTAL_PRICE := V_PRICE + TEMP2;

    IF TEMP=0 THEN
        DBMS_OUTPUT.PUT_LINE('NO FOOD IN THE CART!!');

    END IF;
    DBMS_OUTPUT.PUT_LINE('TOTAL PRICE: '||V_TOTAL_PRICE);

END;
/

----------------------------------------------------------------------------------------------------------------
-- DELETE FROM CART

CREATE OR REPLACE PROCEDURE P_DELETE_FROM_CART(V_ID CART.CART_ID%TYPE, V_QUANTITY NUMBER) IS
    CURSOR C_CART_DETAIL IS SELECT * FROM CART WHERE CART_ID = V_ID;
    CURSOR C_FOOD_CART_DETAIL IS SELECT * FROM FOOD_CART WHERE FOOD_CART_ID = V_ID;
    R_CART_DETAIL C_CART_DETAIL%ROWTYPE;
    R_FOOD_CART_DETAIL C_FOOD_CART_DETAIL%ROWTYPE;

BEGIN
    OPEN C_CART_DETAIL;
    OPEN C_FOOD_CART_DETAIL;
    FETCH C_CART_DETAIL INTO R_CART_DETAIL;
    FETCH C_FOOD_CART_DETAIL INTO R_FOOD_CART_DETAIL;
    IF C_CART_DETAIL%FOUND=TRUE THEN
        P_CART_DELETE_HELPER(V_ID, V_QUANTITY, R_CART_DETAIL);

    ELSIF C_FOOD_CART_DETAIL%FOUND=TRUE THEN
        P_FOOD_CART_DELETE_HELPER(V_ID, V_QUANTITY, R_FOOD_CART_DETAIL);

    ELSE
        DBMS_OUTPUT.PUT_LINE('SOMETHINGS NOT RIGHT!!');

    END IF;
END;
/

----------------------------------------------------------------------------------------------------------------

-- DELETE FROM CART HELPER
CREATE OR REPLACE PROCEDURE P_CART_DELETE_HELPER(V_ID CART.CART_ID%TYPE, V_QUANTITY NUMBER, R_CART_DETAIL CART%ROWTYPE) IS
    V_TOTAL_TICKET_PRICE NUMBER;
    V_CART_ID CART.CART_ID%TYPE;
    V_INDI_PRICE NUMBER;

BEGIN
    IF V_QUANTITY > R_CART_DETAIL.QUANTITY THEN
        DBMS_OUTPUT.PUT_LINE('QUANTITY ENTERED IS MORE THAN QUANTITY PRESENT IN THE CART!!');

    ELSIF V_QUANTITY < R_CART_DETAIL.QUANTITY THEN
        V_INDI_PRICE := (R_CART_DETAIL.PRICE)/(R_CART_DETAIL.QUANTITY);
        UPDATE CART SET
            QUANTITY = QUANTITY - V_QUANTITY,
            PRICE = V_INDI_PRICE*(QUANTITY-V_QUANTITY)
        WHERE CART_ID = V_ID;
        SELECT PRICE INTO V_TOTAL_TICKET_PRICE FROM CART WHERE CART_ID = V_ID;
        UPDATE PRICE_DETAILS SET
            TOTAL_TICKET_PRICE = V_TOTAL_TICKET_PRICE,
            TOTAL_PRICE = V_TOTAL_TICKET_PRICE + PRICE_DETAILS.TOTAL_FOOD_PRICE
        WHERE USER_ID = R_CART_DETAIL.USER_ID;
        DBMS_OUTPUT.PUT_LINE('SUCCESSFUL');

    ELSE
        DELETE FROM FOOD_CART WHERE CART_ID = V_ID;
        DELETE FROM PRICE_DETAILS WHERE USER_ID = R_CART_DETAIL.USER_ID;
        DELETE FROM CART WHERE CART_ID = V_ID;
        DBMS_OUTPUT.PUT_LINE('CART ITEM DELETED!!');

    END IF;
END;
/

----------------------------------------------------------------------------------------------------------------

--DELETE FROM FOOD_CART HELPER

CREATE OR REPLACE PROCEDURE P_FOOD_CART_DELETE_HELPER(V_ID CART.CART_ID%TYPE, V_QUANTITY NUMBER, R_FOOD_CART_DETAIL FOOD_CART%ROWTYPE) IS
    V_TOTAL_FOOD_PRICE NUMBER;
    V_TOTAL_PRICE NUMBER;
    V_USER_ID CART.USER_ID%TYPE;
    V_INDI_PRICE NUMBER;
    V_CART_ID CART.CART_ID%TYPE;

BEGIN
    V_INDI_PRICE := (R_FOOD_CART_DETAIL.PRICE)/(R_FOOD_CART_DETAIL.QUANTITY);
    SELECT PRICE, CART_ID INTO V_TOTAL_FOOD_PRICE, V_CART_ID FROM FOOD_CART WHERE FOOD_CART_ID = V_ID;
    SELECT USER_ID INTO V_USER_ID FROM CART WHERE CART_ID = V_CART_ID;
    IF V_QUANTITY > R_FOOD_CART_DETAIL.QUANTITY THEN
        DBMS_OUTPUT.PUT_LINE('QUANTITY ENTERED IS MORE THAN QUANTITY PRESENT IN THE CART!!');

    ELSIF V_QUANTITY < R_FOOD_CART_DETAIL.QUANTITY THEN
        UPDATE FOOD_CART SET
            QUANTITY = QUANTITY - V_QUANTITY,
            PRICE = V_INDI_PRICE*(QUANTITY-V_QUANTITY)
        WHERE FOOD_CART_ID = V_ID;
        UPDATE PRICE_DETAILS SET
            TOTAL_FOOD_PRICE = TOTAL_FOOD_PRICE - (V_INDI_PRICE*V_QUANTITY),
            TOTAL_PRICE = TOTAL_PRICE - (V_INDI_PRICE*V_QUANTITY)
        WHERE USER_ID = V_USER_ID;
        DBMS_OUTPUT.PUT_LINE('SUCCESSFUL');

    ELSE
        DELETE FROM FOOD_CART WHERE FOOD_CART_ID=V_ID;
        UPDATE PRICE_DETAILS SET
            TOTAL_FOOD_PRICE = TOTAL_FOOD_PRICE - (V_INDI_PRICE*V_QUANTITY),
            TOTAL_PRICE = TOTAL_PRICE - (V_INDI_PRICE*V_QUANTITY)
        WHERE USER_ID = V_USER_ID;
        DBMS_OUTPUT.PUT_LINE('CART ITEM DELETED!!');

    END IF;
END;
/

---------------------------------------------------------------------------------------------------
--Refund--

CREATE OR REPLACE PROCEDURE P_REFUND_NEW(V_TRANSACTION_ID TRANSACTION_TABLE.TRANSACTION_ID%TYPE) IS
    CURSOR C_USER_TRANS IS SELECT * FROM TRANSACTION_TABLE NATURAL JOIN USER_TABLE WHERE TRANSACTION_ID = V_TRANSACTION_ID;
    R_USER_TRANS C_USER_TRANS%ROWTYPE;
    R_USER USER_TABLE%ROWTYPE;
    R_EVENT EVENTS%ROWTYPE;
    R_SLOT SLOT_SELECTION%ROWTYPE;
BEGIN
    OPEN C_USER_TRANS;
    FETCH C_USER_TRANS INTO R_USER_TRANS;

    IF C_USER_TRANS%FOUND=TRUE THEN
        DBMS_OUTPUT.PUT_LINE('TRNASACTION ID: '||R_USER_TRANS.TRANSACTION_ID);
        DBMS_OUTPUT.PUT_LINE('USER ID: '||R_USER_TRANS.USER_ID);

        IF R_USER_TRANS.SHOW_ID LIKE '%S%' THEN
            DBMS_OUTPUT.PUT_LINE('SELECTION ID: '||R_USER_TRANS.SHOW_ID);
            UPDATE slot_selection set
                SEAT_AVAILABILITY = (SEAT_AVAILABILITY + R_USER_TRANS.NO_OF_TICKETS)
            where SELECTION_ID = R_USER_TRANS.SHOW_ID;

        ELSIF R_USER_TRANS.SHOW_ID LIKE '%E%' THEN
            DBMS_OUTPUT.PUT_LINE('EVENT ID: '||R_USER_TRANS.SHOW_ID);
            UPDATE EVENTS SET
                SEAT_AVAILABILITY = (SEAT_AVAILABILITY + R_USER_TRANS.NO_OF_TICKETS)
            WHERE EVENT_ID = R_USER_TRANS.SHOW_ID;
        ELSE
            DBMS_OUTPUT.PUT_LINE('SOMETHING IS NOT RIGHT!!');
        END IF;
            DBMS_OUTPUT.PUT_LINE('QUANTITY: '||R_USER_TRANS.no_of_tickets);
            DBMS_OUTPUT.PUT_LINE('TICKET PRICE: '||R_USER_TRANS.TOTAL_PRICE);
            DBMS_OUTPUT.PUT_LINE('FOOD PRICE: '|| (R_USER_TRANS.TOTAL_PRICE - R_USER_TRANS.TOTAL_TICKET_PRICE));
            DBMS_OUTPUT.PUT_LINE('TOTAL PRICE: '|| R_USER_TRANS.TOTAL_PRICE);

        UPDATE USER_TABLE SET
            WALLET_BALANCE = WALLET_BALANCE + R_USER_TRANS.TOTAL_TICKET_PRICE - R_USER_TRANS.TOTAL_TICKET_PRICE * 0.2
        WHERE USER_ID = R_USER_TRANS.USER_ID;

        DELETE FROM TRANSACTION_TABLE WHERE TRANSACTION_ID = V_TRANSACTION_ID;

        SELECT * INTO R_USER FROM USER_TABLE WHERE USER_ID = R_USER_TRANS.user_id;
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Price Refunded: '||(R_USER_TRANS.TOTAL_TICKET_PRICE - R_USER_TRANS.TOTAL_TICKET_PRICE * 0.2));
        DBMS_OUTPUT.PUT_LINE('New Balance: '|| R_USER.WALLET_BALANCE);
        IF R_USER_TRANS.SHOW_ID LIKE '%S%' THEN
            SELECT * INTO R_SLOT FROM SLOT_SELECTION WHERE SELECTION_ID = R_USER_TRANS.SHOW_ID;
            DBMS_OUTPUT.PUT_LINE('New Seat availability: '|| R_SLOT.SEAT_AVAILABILITY);
        ELSIF R_USER_TRANS.SHOW_ID LIKE '%E%' THEN
            SELECT * INTO R_EVENT FROM EVENTS WHERE EVENT_ID = R_USER_TRANS.SHOW_ID;
            DBMS_OUTPUT.PUT_LINE('NEW SEAT AVAILABILITY: '|| R_EVENT.SEAT_AVAILABILITY);
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('TRNASACTION NOT FOUND!! 😢😢');
    END IF;
    CLOSE C_USER_TRANS;
END;
/

BEGIN
    P_REFUND_NEW(V_TRANSACTION_ID  => 'T0004' /*IN VARCHAR2*/);
END;